---
import { ClientRouter } from "astro:transitions";
import DynamicBackground from "../components/DynamicBackground.astro";
import ScrollIndicator from "../components/ScrollIndicator.astro";
import Footer from "../components/Footer.astro";

interface Props {
  title?: string;
  showIndicatorOverride?: boolean;
}
const { title, showIndicatorOverride } = Astro.props;

const pageTitle = `${title || "Homepage"} | sobun`;

const currentPath = Astro.url.pathname;
const shouldShowBasedOnPath = currentPath === "/";
const showScrollIndicator =
  showIndicatorOverride !== undefined
    ? showIndicatorOverride
    : shouldShowBasedOnPath;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/png" href="/favicon.png" />
    <meta name="generator" content={Astro.generator} />
    <title>{pageTitle}</title>
    <ClientRouter />
    <script is:inline>
      // Force light theme for a bright UI with dark text
      document.documentElement.classList.remove("dark");
    </script>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=EB+Garamond:ital,wght@0,400..800;1,400..800&display=swap"
      rel="stylesheet"
    />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap"
      rel="stylesheet"
    />
    <!-- JP fonts: Shippori Mincho B1, Noto Sans JP, Noto Serif JP, Dela Gothic One, Yuji Mai, Yuji Syuku -->
    <link
      href="https://fonts.googleapis.com/css2?family=Shippori+Mincho+B1:wght@400;700&family=Noto+Sans+JP:wght@300;400;500;700;900&family=Noto+Serif+JP:wght@400;500;700&family=Dela+Gothic+One&family=Yuji+Mai&family=Yuji+Syuku&display=swap"
      rel="stylesheet"
    />

    <style>
      :root {
        /* Bright background + white text */
        --bg-color: #01011a;
        --text-color: #ffffff;
        --text-muted: #f0f0f0;
        --link-color: var(--text-color);
        --link-hover-color: #ffffff;
        --link-visited-color: #ffffff;
        --footer-bg: #0000003d;
        --footer-text: #ffffff;
        --footer-heading: #ffffff;
        --footer-link: #ffffff;
        --footer-link-hover: #ffffff;
        --footer-copyright: #cfcfcf;
        --dynamic-bg-opacity: 0.3;

        --button-hover-bg: #ffffff26;
        --button-hover-text: #ffffff;
        --button-border-color: #ffffff80;
        --button-border-hover-color: #ffffffcc;

        --card-border-color: var(--button-border-color);

        --timeline-marker-border-color: #333;
        --timeline-marker-bg-color: #333;
        --timeline-line-color: #3333;

        /* Typography stacks (JP-first fallbacks) */
        --font-family-serif: "Noto Serif JP", "Shippori Mincho B1", "EB Garamond", Garamond, "Times New Roman", serif;
        --font-family-sans: "Noto Sans JP", "Inter", -apple-system, BlinkMacSystemFont,
          "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji",
          "Segoe UI Emoji", "Segoe UI Symbol";
        --font-family-heading: "Dela Gothic One", "Noto Sans JP", "Inter", system-ui, sans-serif;
        --font-family-calligraphy: "Yuji Mai", "Yuji Syuku", "Noto Serif JP", serif;
      }

      html.dark {
        #--bg-color: #121212;
        --text-color: #e3e3e3;
        --text-muted: #d4d4d4;
        --link-color: var(--text-color);
        --link-hover-color: #fff;
        --link-visited-color: #fff;
        --footer-bg: #000000aa;
        --footer-text: #cccccc;
        --footer-heading: #eeeeee;
        --footer-link: #cccccc;
        --footer-link-hover: #ffffff;
        --footer-copyright: #888888;
        --dynamic-bg-opacity: 0.4;

        --button-hover-bg: #cccccc26;
        --button-hover-text: #fff;
        --button-border-color: #cccccc99;
        --button-border-hover-color: #ffffffcc;

        --card-border-color: var(--button-border-color);

        --timeline-marker-border-color: #cccccc;
        --timeline-marker-bg-color: #cccccc;
        --timeline-line-color: #cccccc33;
      }

      html {
        background-color: var(--bg-color);
      }

      html,
      body {
        margin: 0;
        width: 100%;
        height: 100%;
        font-family: var(--font-family-serif);
        color: var(--text-color);
        transition:
          background-color 0.3s ease,
          color 0.3s ease;
      }

      .page-wrapper {
        height: 100vh;
        overflow-y: auto;
        position: relative;
        overscroll-behavior-y: contain;
      }

      .main-content {
        min-height: 100vh;
        padding: 0;
      }

      @media (min-width: 768px) {
        .main-content {
          padding: 0 10vw;
        }
      }
    </style>

    <style is:global>
      /* Headings use bold kaku-gothic (Dela Gothic One) */
      h1, h2, h3, h4, h5, h6 {
        font-family: var(--font-family-heading);
      }
      /* Utility for shod≈ç-style calligraphy when needed */
      .jp-calligraphy { font-family: var(--font-family-calligraphy); }
    </style>

    <style is:global>
      .scroll-reveal-animate {
        opacity: 0;
        filter: blur(5px);
        transform: translateY(20px) translateZ(0);
        will-change: opacity, filter, transform;
        transition:
          opacity 0.8s ease-out,
          filter 0.8s ease-out,
          transform 0.8s ease-out;
      }
      .scroll-reveal-animate.visible {
        opacity: 1;
        filter: blur(0px);
        transform: translateY(0) translateZ(0);
      }

      .page-load-initial-state {
        opacity: 0;
        filter: blur(5px);
        transform: translateY(20px) translateZ(0);
        will-change: opacity, filter, transform;
      }

      @keyframes pageLoadAnimate {
        to {
          opacity: 1;
          filter: blur(0px);
          transform: translateY(0) translateZ(0);
        }
      }

      a {
        color: var(--text-color);
        text-decoration: underline;
        text-underline-offset: 0.2em;
        transition: color 0.2s ease;
      }

      a:hover,
      a:focus,
      a:active {
        color: var(--link-hover-color);
        text-decoration: underline;
        text-underline-offset: 0.2em;
      }
    </style>

    <script>
      let currentIntersectionObserver: IntersectionObserver | null = null;

      document.addEventListener("astro:page-load", () => {
        if (currentIntersectionObserver) {
          currentIntersectionObserver.disconnect();
        }

        const pageWrapper = document.querySelector(".page-wrapper");
        if (!pageWrapper) {
          console.error(
            "Page wrapper element not found for IntersectionObserver."
          );
          return;
        }
        const observerOptions = {
          root: pageWrapper,
          rootMargin: "0px",
          threshold: 0.2,
        };

        const observerCallback = (entries, observer) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              entry.target.classList.add("visible");
              observer.unobserve(entry.target);
            }
          });
        };

        const newObserver = new IntersectionObserver(
          observerCallback,
          observerOptions
        );
        currentIntersectionObserver = newObserver;

        const elementsToObserve = document.querySelectorAll(
          ".scroll-reveal-animate"
        );
        elementsToObserve.forEach((el) => {
          newObserver.observe(el);
        });
      });
    </script>

    <script>
      import { gsap } from "gsap";
      import { ScrollTrigger } from "gsap/ScrollTrigger";

      gsap.registerPlugin(ScrollTrigger);

      function setupSectionAnimations() {
        const pageWrapper = document.querySelector(".page-wrapper");
        if (!pageWrapper) {
          console.warn(
            "Section animations setup skipped: page wrapper not found."
          );
          return;
        }

        const sections = document.querySelectorAll(".section-wrapper");

        if (sections.length > 0) {
          sections.forEach((section) => {
            const sectionTitle = section.querySelector(".scroll-target-title");
            const sectionContent = section.querySelector(
              ".scroll-target-content"
            );

            ScrollTrigger.getAll().forEach((trigger) => {
              if (
                trigger.trigger === sectionTitle ||
                trigger.trigger === sectionContent
              ) {
                trigger.kill();
              }
            });

            if (sectionTitle) {
              gsap.set(sectionTitle, { filter: "blur(8px)", opacity: 0 });
              gsap
                .timeline({
                  scrollTrigger: {
                    trigger: sectionTitle,
                    scroller: pageWrapper,
                    start: "top 85%",
                    end: "bottom top",
                    scrub: 1,
                  },
                })
                .to(sectionTitle, {
                  filter: "blur(0px)",
                  opacity: 1,
                  ease: "sine",
                  duration: 8,
                })
                .to(sectionTitle, {
                  filter: "blur(8px)",
                  opacity: 0,
                  ease: "sine",
                  duration: 1,
                });
            }

            if (sectionContent) {
              gsap.set(sectionContent, { opacity: 0, y: 30 });
              gsap
                .timeline({
                  scrollTrigger: {
                    trigger: sectionContent,
                    scroller: pageWrapper,
                    start: "top 85%",
                    end: "bottom 30%",
                    scrub: 1,
                  },
                })
                .to(sectionContent, {
                  opacity: 1,
                  y: 0,
                  ease: "power1.inOut",
                  duration: 2,
                })
                .to(sectionContent, {
                  opacity: 0,
                  y: -30,
                  ease: "power1.inOut",
                  duration: 2,
                });
            }
          });
        }
      }

      document.addEventListener("astro:page-load", setupSectionAnimations);
    </script>
    <script>
      // Keep forcing light theme regardless of system preference
      const ensureLight = () => document.documentElement.classList.remove("dark");
      ensureLight();
      document.addEventListener("astro:page-load", ensureLight);
    </script>
  </head>
  <body>
    <div class="page-wrapper">
      <DynamicBackground />
      <main class="main-content">
        <slot />
      </main>
      <div class="some-empty-space" style="height: 20vh;"></div>
      <Footer />
      {showScrollIndicator && <ScrollIndicator />}
    </div>
  </body>
</html>
